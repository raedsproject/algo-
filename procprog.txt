PROCEDURE dot_product (var v1 , v2 : ARRAY_OF INTEGER; var ps : INTEGER)
VAR
 i : INTEGER ; 
 test : boolean ; 
BEGIN
    test:=True 
    i := 0 ;
    ps:=0
    IF (v1.length <> v2.length) THEN
       Write("Error , you cannot give tow different length")
       test:= FALSE
    END_IF

    FOR i FROM 0 TO v1.length DO 
       ps:=ps + v1[i]v2[i]
    END_FOR
END . 
FUNCTION read_size() : INTEGER 
VAR 
n : INTEGER ; 
BEGIN
   WHILE (n > 0 AND n < 11 ) DO 
      Red(n) ; 
   END_WHILE
   return(n) ; 
END . 
PROCEDURE read_array (n : INTEGER ,  VAR T: ARRAY_OF INTEGER)
VAR 
i : INTEGER 
BEGIN
     FOR i FROM 0 TO n-1 DO 
       Read (T[i])
     END_FOR
END

ALGORITHM orthogonal-vect
VAR
 v1 , v2 :  ARRAY_OF INTEGER[10];
 ps : INTEGER ;
 n1 , n2 : INTEGER ; 
BEGIN
    n1 := read_size()
    read_array(n1 , v1 ) ;
    n2 := read_size()
    read_array(n2 , v2 ) ;

    dot_product(v1 , v2 , ps)

    IF (ps = 0 AND test:=True) THEN
       Write(" orthogonal vectors ")
       ELSE
          Write(" not orthogonal vectors")
       END_IF
    END_IF
END
// second version 
FUNCTION dot_product(var v1 , v2 : ARRAY_OF INTEGER) : INTEGER
VAR
   i , ps : INTEGER
   test : boolean
BEGIN
    test:=True
    ps := 0 ;
    i := 0 ;
    IF (v1.length <> v2.length) THEN
       Write("Error , you cannot give tow different length")
       test:=FALSE ; 
    END_IF
    FOR i FROM 0 TO v1.length DO 
       ps:=ps + v1[i]v2[i]
    END_FOR
    RETURN ps ;
END .


ALGORITHM orth-vectors
VAR
 v1 , v2 :  ARRAY_OF INTEGER[10];
 ps : INTEGER ;
 n1 , n2 : INTEGER ; 
 test : boolean
BEGIN

    n1 := read_size()
    read_array(n1 , v1 ) ;
    n2 := read_size()
    read_array(n2 , v2 ) ;

    ps := dot_product(v1 , v2);

   IF (ps = 0 AND test=True) THEN
       Write(" orthogonal vectors ")
       ELSE
          Write("not orthogonal vectors ")
       END_IF
   END_IF